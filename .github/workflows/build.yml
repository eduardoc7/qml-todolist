
name: build

on: 
  push:
    branches:
      - test-code-quality

jobs:
  Testing_Code_Quality: 
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Installing Dependencies
        run: |
          sudo apt update && sudo apt install clang-tidy clang-format ninja-build -y
  
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.16.x'
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          aqtversion: '==2.1.*'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: '${{ github.workspace }}/bin/'
          install-deps: 'true'
          tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator tools_cmake tools_ninja tools_generic'
          setup-python: 'true'
          tools-only: 'false'
          cache: 'false'
          extra: '--external 7z'

      - name: Build project
        run: |
          export CMAKE_PREFIX_PATH=${{env.Qt5_Dir}}
          export CC=$(which gcc)
          export CXX=$(which gcc++)
          export CURRENT_SOURCE_DIR=$(pwd)
          mkdir build && cd build
          export CURRENT_BUILD_DIR=$(pwd)
          cmake .. -G Ninja
          cmake --build . --config Debug --target all -j $(nproc) --

      # Check the code and create report code quality
      - name: Running Clang Tidy # with checks readability, mordenize, hipperformace, performance
        run: |
          run-clang-tidy -p build -fix -j $(nproc) -header-filter='.*' -format $(find tests/ -iname '*.cpp') > report_code_quality.txt

      - name: Upload Artifacts
        if: ${{ failure() }} || ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: report_code_quality
          path: ./report_code_quality.txt

      # Publish updates to apply clang-tidy --fix-errors  
      - name: Delete Report
        if: ${{ failure() }} || ${{ success() }}
        run: |
          rm -rf report_code_quality.txt
          
      - name: Get the current branch name
        if: ${{ failure() }} || ${{ success() }}
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: myref

      - name: Publish Updates
        if: ${{ failure() }} || ${{ success() }}
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.myref.outputs.branch }} # Current branch 